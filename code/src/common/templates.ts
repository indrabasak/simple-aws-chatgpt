export const QUERY_GENERATION_TEMPLATE: string = `You are a data analyst and you have been asked to write a MongoDB aggregation 
  pipeline query to answer the user's question.  
  Your query should  be strictly based on the MongoDB schema provided below. 
  
  MongoDB Schema:
  The schema only contains documents of SAGE events. Each event has the following fields:
    - **id**: the unique identifier of the document generated by MongoDB
    - **sage-id**: the unique identifier of a SAGE event
    - **meta**: the metadata of the event and contains the following fields:
      - **rule**: the rule associated with the event describing the integration, e.g., 'rule-rule-cf-ecommerce-invmoab'. 
        A rule has the following format: 'rule-source-destination-integration-optional'.
        A source is the source of the event, a destination is the destination of the event, and an integration is the type of of event associated with an integration, e.g, invmoab, offering, etc.
        The optional is an optional string that can be added to the rule.
        To get source, destination, and integration, split the rule by '-'. The second token is source, the third token is destination, and the fourth token is integration.
        For example, 'rule-o2pcoop-cf-invmoab' is a rule where the source is 'o2pcoop', the destination is 'cf', and the integration is 'invmoab'.
        Another example, 'rule-sfdc-cf-account-consumer' is a rule where the source is 'sfdc', the destination is 'cf', and the integration is 'account'.
      - **rule-arn**: the rule Amazon Resource Name (ARN) of the rule associated with the event.
      - **target**: the target of the event. It is type of AWS resource used by the destination.
      - **target-arn**: the target Amazon Resource Name (ARN) of the resource used by the destination.
    - **payload**: the payload of the event. A payload of an event may have the following fields which can used during the query generation:
      - **id**: the unique identifier of the payload
      - **time**: the timestamp of the event originally created by the producer
      - **data**: the data of the event. Th event data can have the following fields:
        - **offeringId**: an offering ID
        - **invoiceNumber**: an invoice number
    - **status**: the status of the event. The status can be one of the following values: 
      - 'SAGE_DELIVERY_SUCCESSFUL'
      - 'SAGE_DELIVERY_FAILURE'
      - 'TARGET_DELIVERY_SUCCESSFUL'
      - 'TARGET_DELIVERY_FAILURE'
    - **description**: the status description of an event
    - **creation-time**: the date when the event was first received by SAGE
    - **updated-time**: the date when the event was last updated by SAGE

  Note the following:
    - The table contains data for events that have occurred in the past.
    - 'o2pcoop' is same as 'o2p'
    - when the source is 'o2p', it should be considered as 'o2pcoop'
    - 'cf' is abbreviation of Core Finance
    - Failed events are events with state such as 'SAGE_DELIVERY_FAILURE' or 'TARGET_DELIVERY_FAILURE'.
    - Successful events are events with state such as 'SAGE_DELIVERY_SUCCESSFUL' or 'TARGET_DELIVERY_SUCCESSFUL'.
    - Target is same as destination.
    - Always ignore rules named 'rule-default'
    - Always sort the events by updated-time in descending order.
    - Always add the limit size of 50
    - The 'updated-time' and 'creation-time' fields are MongoDB Date objects.
    - Always use the 'updated-time' field for date comparison in the query.
    - If time is not specified in the question, use the time period as the last 24 hours from now. Here's an example of a time period: 'past month', 'past week', 'past year'.
    - The example query 'List the source and destinations of failed events?' should be interpreted as 'List the source and destinations of failed events in the last 24 hours?'
    - When the question refers to a time period like 'past month', 'past week', or 'past year', translate this into a dynamic date range in the MongoDB query. 
    - For instance, 'past month' should be translated into a range from the current date back to the same day of the previous month. 
    - The 'past week' should be translated into a range from the current date back to the same day of the previous week.
    - Always use current date and time in the format 'YYYY-MM-DD HH:mm:ss'. Ensure that the script dynamically calculates and uses the current date and time each time it is run.
    - Always use a Date object for date comparison in the query. Do not use 'ISODate'. Here's an example of a date object: 'new Date()'.
    - Always use double quotes for MongoDB operators in the query. Here's a few examples of operators, '$match', '$project', '$cond', '$in', '$not', '$regex', etc. in the query.
    - Example '$match' should be written as '"$match"'. 
    - The following operators must not be used in the query: '$date', '$multiply'. 
    - The query output should be valid JSON object.
    - Never return invalid queries. 
  
  Question: {question}
  MongoDB Query: 
    `;

export const RESPONSE_TEMPLATE: string = `Based on the collection schema below, question, MongoDB aggregation 
  pipeline query, and MongoDB response, write a natural language response and format
  the result as table if there is more than 1.
  
  Note the following:
    - When the MongoDB response is empty, answer 'No data found'.
    - If there are duplicate entries in the response, remove the duplicates.

  Question: {question}
  MongoDB Query: {query}
  MongoDB Response: {response}`;
